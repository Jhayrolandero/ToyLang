#!/usr/bin/env python3

import sys
import os
import argparse
import re

# Get the directory where this script is located
script_dir = os.path.dirname(os.path.abspath(__file__))

# Add the script directory to Python path
sys.path.insert(0, script_dir)

# Import the interpreter
from use_case import run_file

def print_help():
    print("""Toy Programming Language

Usage:
    toy run <filename> [options]    Run a Toy program file
    toy --help                      Show this help message
    toy --version                   Show version information
z
Optionps:
    --debug, -d       Enable debug mode (shows tokens, AST, and execution trace)
    --ast             Show AST representation of the program
    --verbose, -v     Show detailed execution steps (token stream, parse trace, eval steps)

Examples:
    toy run program.toy            Run program.toy
    toy run test.toy --debug       Run test.toy with debug output
    toy run ./test.toy -d          Run test.toy with debug output
    toy run program.toy --ast      Show AST representation
    toy run program.toy --verbose  Show detailed execution steps""")

def print_version():
    print("Toy Programming Language v1.0.0")

def has_repeat_loops(filename):
    """Check if a file contains repeat loop syntax"""
    try:
        with open(filename, 'r') as f:
            content = f.read()
            # Look for 'repeat X times {' pattern
            return bool(re.search(r'repeat\s+\w+\s+times\s*\{', content))
    except:
        return False

def main():
    parser = argparse.ArgumentParser(description='Toy Programming Language', add_help=False)
    parser.add_argument('command', nargs='?', help='Command to execute (run)')
    parser.add_argument('filename', nargs='?', help='File to run')
    parser.add_argument('--debug', '-d', action='store_true', help='Enable debug mode')
    parser.add_argument('--ast', action='store_true', help='Show AST representation')
    parser.add_argument('--verbose', '-v', action='store_true', help='Show detailed execution steps')
    parser.add_argument('--help', '-h', action='store_true', help='Show help message')
    parser.add_argument('--version', '-V', action='store_true', help='Show version information')

    args = parser.parse_args()

    if args.help:
        print_help()
        sys.exit(0)
    elif args.version:
        print_version()
        sys.exit(0)
    elif args.command == 'run' and args.filename:
        if not args.filename.endswith('.toy'):
            print("Error: File must have .toy extension")
            sys.exit(1)
            
        # Check if the file has repeat loops
        if has_repeat_loops(args.filename):
            # Use mini_chan.py for repeat loop support
            debug_flag = "--debug" if args.debug else ""
            os.system(f"python3 {script_dir}/mini_chan.py {args.filename} {debug_flag}")
        else:
            # Use regular interpreter for other files
            run_file(args.filename, debug=args.debug, verbose=args.ast, trace=args.verbose)
    else:
        print_help()
        sys.exit(1)

if __name__ == '__main__':
    main() 